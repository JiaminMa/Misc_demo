From af4e28a886996dd172208748ca6214af0eea3bdc Mon Sep 17 00:00:00 2001
From: Jiamin Ma <jiamin.ma_2@nxp.com>
Date: Tue, 22 Aug 2017 13:19:02 +0800
Subject: [PATCH] MROM-1634 Add stack protector for 6sll.

Port the stack canary code from ulp1_b0.

Signed-off-by: Jiamin Ma <jiamin.ma_2@nxp.com>
---
 mcurom_src/code/bootstrap/Makefile.objects         |  4 ++-
 mcurom_src/code/bootstrap/src/arch_cortex_a9.s     | 14 +++++++-
 mcurom_src/code/bootstrap/src/boot_security.c      | 41 ++++++++++++++++++++++
 mcurom_src/code/bootstrap/src/boot_security_s.inc  | 23 ++++++++++++
 mcurom_src/code/bootstrap/src/boot_security_s.s    | 35 ++++++++++++++++++
 mcurom_src/code/bootstrap/src/mem_utility.s        | 27 +++++++-------
 mcurom_src/code/bootstrap/src/pu_irom_boot_zas.c   |  5 +++
 .../code/build/link/imx6sll_ads_rom_link.cmd       | 10 ++++++
 .../code/build/link/imx6sll_ads_rom_link_ddr.cmd   | 11 +++++-
 mcurom_src/code/build/make/Makefile.compiler       |  5 +--
 10 files changed, 158 insertions(+), 17 deletions(-)
 create mode 100644 mcurom_src/code/bootstrap/src/boot_security.c
 create mode 100644 mcurom_src/code/bootstrap/src/boot_security_s.inc
 create mode 100644 mcurom_src/code/bootstrap/src/boot_security_s.s

diff --git a/mcurom_src/code/bootstrap/Makefile.objects b/mcurom_src/code/bootstrap/Makefile.objects
index 760b0b7..f6c61a2 100644
--- a/mcurom_src/code/bootstrap/Makefile.objects
+++ b/mcurom_src/code/bootstrap/Makefile.objects
@@ -28,7 +28,9 @@ bootstrap_OBJECTS = \
   pu_irom_mmu.ospace\
   pu_irom_hab_hal.ospace \
   misr_value.ospace \
-  pu_irom_log_buffer.ospace
+  pu_irom_log_buffer.ospace \
+  boot_security_s.aos \
+  boot_security.ospace
 #  pu_irom_onenand_flash.ospace \
 #  pu_irom_weim.ospace \
 #  pu_irom_nand_interface.ospace \
diff --git a/mcurom_src/code/bootstrap/src/arch_cortex_a9.s b/mcurom_src/code/bootstrap/src/arch_cortex_a9.s
index e016892..aa86a39 100644
--- a/mcurom_src/code/bootstrap/src/arch_cortex_a9.s
+++ b/mcurom_src/code/bootstrap/src/arch_cortex_a9.s
@@ -36,7 +36,10 @@ ARM_AUXCR_L2EN      EQU     (1 << 1)
     IMPORT l2cache_as_ocram
     IMPORT pl310_base_address
     IMPORT scu_base_address
+    IMPORT __stack_chk_guard
+    IMPORT __stack_chk_fail
 
+    INCLUDE boot_security_s.inc
     PRESERVE8
     AREA    arch_routin, CODE, READONLY
 
@@ -78,6 +81,7 @@ pu_irom_boot_l1icache_enable   FUNCTION
 hapi_cache_invalidate   FUNCTION
 ;===============================
     stmfd   sp!, {r0-r12, lr}
+    PUSH_STACK_GUARD
     MOV     r0,#0
     MCR	    p15,2,r0,c0,c0,0  ; cache size selection register, select dcache
     MRC	    p15,1,r0,c0,c0,0  ; cache size ID register
@@ -126,6 +130,7 @@ l2_inv_loop
     BNE l2_inv_loop
 
 l2cache_inv_skip
+    CHK_STACK_GUARD
     ldmfd   sp!, {r0-r12, lr}
     bx      lr
     ENDFUNC
@@ -136,6 +141,7 @@ l2cache_inv_skip
 hapi_cache_clean_invalidate   FUNCTION
 ;===============================
     stmfd   sp!, {r0-r12, lr}
+    PUSH_STACK_GUARD
     MOV     r0,#0
     MCR	    p15,2,r0,c0,c0,0  ; cache size selection register, select dcache
     MRC	    p15,1,r0,c0,c0,0  ; cache size ID register
@@ -184,6 +190,7 @@ clean_l2_inv_loop
     BNE clean_l2_inv_loop
 
 l2cache_clinv_skip
+    CHK_STACK_GUARD
     ldmfd   sp!, {r0-r12, lr}
     bx      lr
     ENDFUNC
@@ -193,6 +200,7 @@ l2cache_clinv_skip
 invalidate_dcache_range_by_line   FUNCTION
 ;===============================
     stmfd   sp!, {r3, r4, r5, lr}     ; push register onto stack
+    PUSH_STACK_GUARD
      bic   r3, r0, #31            ; r3=cache line aligned starting addr
      add   r4, r0, r1
      ldr   r5,=pl310_base_address
@@ -213,6 +221,7 @@ invalidate_l2_dcache_range_by_line_continue
      blo   invalidate_l2_dcache_range_by_line_continue
      dsb
 skip_inv_l2
+    CHK_STACK_GUARD
      ldmfd   sp!, {r3, r4, r5, lr}
 
      bx    lr
@@ -225,6 +234,7 @@ skip_inv_l2
 hapi_mmu_enable   FUNCTION
 ;=================================
     stmfd   sp!, {r0, lr}        ;push register onto stack
+    PUSH_STACK_GUARD
 
 ; invalidate BTAC
     MCR	    p15,0,r0,c7,c5,6
@@ -279,6 +289,7 @@ hapi_mmu_enable   FUNCTION
     STR r0,[r1,#0x100]
 
 l2cache_enable_skip
+    CHK_STACK_GUARD
     ldmfd   sp!, {r0, lr}
     bx      lr
     ENDFUNC
@@ -289,7 +300,7 @@ l2cache_enable_skip
 hapi_mmu_disable   FUNCTION
 ;==================================
     stmfd   sp!, {r0-r12,lr}        ;push register onto stack
-
+    PUSH_STACK_GUARD
     MRC     p15, 0, r0, c1, c0, 0   ; read CP15 register 1 into r0
     ANDS    r0, r0, #0x1            ; check if MMU is enabled
     BEQ     mmu_disable_done        ; exit if MMU is already disabled
@@ -342,6 +353,7 @@ l2cache_disable_skip
     STR     r0,[r1, #0xc]
 
 mmu_disable_done
+    CHK_STACK_GUARD
     ldmfd   sp!, {r0-r12,lr}
     bx      lr
     ENDFUNC
diff --git a/mcurom_src/code/bootstrap/src/boot_security.c b/mcurom_src/code/bootstrap/src/boot_security.c
new file mode 100644
index 0000000..e318d3e
--- /dev/null
+++ b/mcurom_src/code/bootstrap/src/boot_security.c
@@ -0,0 +1,41 @@
+/****************************************************************
+               Copyright: 2017 NXP, INC.
+    All Rights Reserved. This file contains copyrighted material.
+    Use of this file is restricted by the provisions of a
+    NXP Software License Agreement, which has either
+    accompanied the delivery of this software in shrink wrap
+    form or been expressly executed between the parties.
+ *****************************************************************/
+
+/*!
+ * @file boot_security.c
+ * @brief boot security for imx6sll
+ */
+
+#include <su_basictypes.h>
+
+#define UNINIT_RAM_RND_SIZE     8
+void *__stack_chk_guard __attribute__ ((section("stack_canary_section")));
+static UINT32 uninit_ram_for_rnd[UNINIT_RAM_RND_SIZE] __attribute__ ((section("uninit_ram_for_rnd_section")));
+
+/*!
+ * Get the software random seed for __stack_chk_guard
+ * @param pseed     poniter of __stack_chk_guard
+ *
+ * @return          0 if succeeded
+ *                  1 if failed
+ */
+
+UINT32 get_rnd_seed(void **pseed)
+{
+    UINT32 i = 0;
+    UINT32 seed = 0;
+
+    for (i = 0; i < UNINIT_RAM_RND_SIZE; i++) {
+        seed ^= uninit_ram_for_rnd[i];
+    }
+
+    *pseed = (void *)seed;
+    return 0;
+
+}
diff --git a/mcurom_src/code/bootstrap/src/boot_security_s.inc b/mcurom_src/code/bootstrap/src/boot_security_s.inc
new file mode 100644
index 0000000..e15d4bb
--- /dev/null
+++ b/mcurom_src/code/bootstrap/src/boot_security_s.inc
@@ -0,0 +1,23 @@
+**********************************************
+*           Copyright: 2017 NXP, INC.
+*********************************************
+    MACRO
+    PUSH_STACK_GUARD
+    ldr r0, =__stack_chk_guard
+    ldr r0, [r0]
+    mov r1, r0
+    push {r0, r1}
+    MEND
+
+    MACRO
+    CHK_STACK_GUARD
+    pop {r0, r1}
+    mov r1, r0
+    ldr r0, =__stack_chk_guard
+    ldr r0, [r0]
+    cmp r0, r1
+    ldrne   r0, =__stack_chk_fail
+    blxne r0
+    MEND
+
+    END
diff --git a/mcurom_src/code/bootstrap/src/boot_security_s.s b/mcurom_src/code/bootstrap/src/boot_security_s.s
new file mode 100644
index 0000000..9ab6e1a
--- /dev/null
+++ b/mcurom_src/code/bootstrap/src/boot_security_s.s
@@ -0,0 +1,35 @@
+;/*=============================================================================================
+;								2017	NXP, INC.
+;            All Rights Reserved. This file contains copyrighted material.
+;            Use of this file is restricted by the provisions of a
+;            NXP Software License Agreement, which has either
+;            accompanied the delivery of this software in shrink wrap
+;            form or been expressly executed between the parties.
+;=============================================================================================*/
+
+	THUMB
+
+
+	EXPORT	__stack_chk_fail
+    IMPORT HAPI_WATCHDOG_soft_reset
+
+    AREA   rom_security_routines, CODE, READONLY
+
+;/* !!! IMPORTANT !!!
+; * This function shall be as simple as possible so compilor will
+; * not add instruction to recursively call __stack_chk_fail, otherwise
+; * stack may exhausted.
+; */
+;************** FUNCTION DEFINITIONS ******************************************
+;void __stack_chk_fail(void)
+;===============================
+
+__stack_chk_fail	FUNCTION
+
+    blx HAPI_WATCHDOG_soft_reset
+
+endless_loop
+	b endless_loop	;Waiting for WDOG reset if not been disabled
+
+	bx lr
+	ENDFUNC
diff --git a/mcurom_src/code/bootstrap/src/mem_utility.s b/mcurom_src/code/bootstrap/src/mem_utility.s
index d2f6ea3..ca0bba4 100644
--- a/mcurom_src/code/bootstrap/src/mem_utility.s
+++ b/mcurom_src/code/bootstrap/src/mem_utility.s
@@ -23,7 +23,7 @@
 ; void rom_ttb_init(UINT8 *dest, UINT32 words, UINT32 mask);
 ;===============================
 rom_ttb_init   FUNCTION
-    push {r0,r4-r8,r12, lr}
+    push {r0,r4-r8,r12, r10}
 fast_ttb_init_loop
     cmp r1, #0x8                ; if(lenght ==8)
     blt slow_ttb_init_loop          ; lenght <8, exit fast loop
@@ -42,10 +42,10 @@ fast_ttb_init_loop
     add    r2, #(0x1<<20)
     mov    r12, r2
     add    r2, #(0x1<<20)
-    mov    r14,r2
+    mov    r10,r2
     add    r2, #(0x1<<20)
         
-    stmia   r0!, {r3-r8,r12,r14}
+    stmia   r0!, {r3-r8,r12,r10}
     sub    r1, r1, #0x8         ;  length -=8
     b fast_ttb_init_loop            ;(length >=8), continue loop
 slow_ttb_init_loop
@@ -56,7 +56,8 @@ slow_ttb_init_loop
     sub r1, r1, #0x1
     b slow_ttb_init_loop
 end_ttb_init_loop
-    pop {r0,r4-r8,r12,pc}
+    pop {r0,r4-r8,r12,r10}
+	bx lr
     ENDFUNC       
 
 ;************** FUNCTION DEFINITIONS ******************************************
@@ -64,7 +65,7 @@ end_ttb_init_loop
 ; void rom_meminit_zero(UINT8 *dest, UINT32 words);
 ;===============================
 rom_meminit_zero   FUNCTION
-    push {r0,r4-r7,r12, lr}
+    push {r0,r4-r7,r12, r10}
     mov    r2,  #0x0
     mov    r3,  r2
     mov    r4,  r2
@@ -72,11 +73,11 @@ rom_meminit_zero   FUNCTION
     mov    r6,  r2
     mov    r7,  r2
     mov    r12, r2
-    mov    r14, r2
+    mov    r10, r2
 fast_zero_loop
     cmp r1, #0x8                ; if(lenght ==8)
     blt slow_zero_loop          ; lenght <8, exit fast loop
-    stmia   r0!, {r2-r7,r12,r14}
+    stmia   r0!, {r2-r7,r12,r10}
     sub    r1, r1, #0x8         ;  length -=8
     b fast_zero_loop            ;(length >=8), continue loop
 slow_zero_loop
@@ -86,7 +87,8 @@ slow_zero_loop
     sub r1, r1, #0x1
     b slow_zero_loop
 end_zero_loop
-    pop {r0,r4-r7,r12,pc}
+    pop {r0,r4-r7,r12,r10}
+	bx lr
     ENDFUNC
 
 ;************** FUNCTION DEFINITIONS ******************************************
@@ -95,15 +97,15 @@ end_zero_loop
 ;===============================
 rom_memcpy_opt   FUNCTION
 
-    push {r0,r4-r7, r8, r12, lr}
+    push {r0,r4-r7, r8, r12, r10}
     mov r8, r2
 
 ; copy in terms of 8 words till the length is less than 32 bytes
 word8_copy_loop
     cmp r8, #32                         ; if(length == 32)
     blt word_copy_loop                  ; lenght <32, exit 8 word loop
-    ldmia   r1!, {r2-r7,r12,r14}
-    stmia   r0!, {r2-r7,r12,r14}
+    ldmia   r1!, {r2-r7,r12,r10}
+    stmia   r0!, {r2-r7,r12,r10}
     sub    r8, r8, #32                  ; length -=32
     b word8_copy_loop                   ;(length >=32), continue loop
 
@@ -126,7 +128,8 @@ byte_copy_loop
     b byte_copy_loop
 
 exit_copy_loop
-    pop {r0,r4-r7,r8, r12, pc}
+    pop {r0,r4-r7,r8, r12, r10}
+	bx lr
     ENDFUNC
 
   END
diff --git a/mcurom_src/code/bootstrap/src/pu_irom_boot_zas.c b/mcurom_src/code/bootstrap/src/pu_irom_boot_zas.c
index bd13b36..4697b98 100644
--- a/mcurom_src/code/bootstrap/src/pu_irom_boot_zas.c
+++ b/mcurom_src/code/bootstrap/src/pu_irom_boot_zas.c
@@ -201,6 +201,9 @@ Portability: Portable.
 #define EEPROM_IROM_DATA_HEADER_OFFSET      (0x400)
 #define QSPI_IROM_DATA_HEADER_OFFSET        (0x1000)
 
+extern void *__stack_chk_guard;
+extern UINT32 get_rnd_seed(void **pseed);
+
 UINT32 l2cache_as_ocram = FALSE;
 /*==================================================================================================
                           LOCAL TYPEDEFS (STRUCTURES, UNIONS, ENUMS)
@@ -1539,6 +1542,8 @@ void pu_irom_init(void)
 
 	TRACE("BootROM: Hello, i.MX6SLL ROM!\n");
 
+    get_rnd_seed(&__stack_chk_guard);
+
     /* Init log buffer */
     pu_irom_log_init();
 
diff --git a/mcurom_src/code/build/link/imx6sll_ads_rom_link.cmd b/mcurom_src/code/build/link/imx6sll_ads_rom_link.cmd
index 2936b3d..c004b8f 100644
--- a/mcurom_src/code/build/link/imx6sll_ads_rom_link.cmd
+++ b/mcurom_src/code/build/link/imx6sll_ads_rom_link.cmd
@@ -121,6 +121,16 @@ IRAM_RW_BSS +0 0x0003000  ; HAB data has to be within first partition i.e. 8k
         *(usb_buffer_no_init)
     }
 
+    SEC_FENCE0 +0 ALIGN 0x100 UNINIT
+    {
+        *(uninit_ram_for_rnd_section)
+    }
+
+    SEC_FENCE1 +0 ALIGN 0x400
+    {
+        *(stack_canary_section, +FIRST)
+    }
+
     DATA  +0 0x00000800   ; Max is to prevent overflow into RDL space
     {
         *(+RW)
diff --git a/mcurom_src/code/build/link/imx6sll_ads_rom_link_ddr.cmd b/mcurom_src/code/build/link/imx6sll_ads_rom_link_ddr.cmd
index 4779ae2..a45305e 100644
--- a/mcurom_src/code/build/link/imx6sll_ads_rom_link_ddr.cmd
+++ b/mcurom_src/code/build/link/imx6sll_ads_rom_link_ddr.cmd
@@ -64,6 +64,16 @@ ROM1 0x80000000 0x00020000
         *(+RW)
     }
 
+    SEC_FENCE0 0x80012800 UNINIT 0x00000100
+    {
+        *(uninit_ram_for_rnd_section)
+    }
+
+    SEC_FENCE1 +0 UNINIT 0x00000100
+    {
+        *(stack_canary_section, +FIRST)
+    }
+
     ; RAM Vector table:  This must remain at this address, since it is referenced by
     ; the FLASH code.  It is placed here so the address does not need to change as
     ; the internal RAM size changes.  This is listed in the ROM section so that the
@@ -108,7 +118,6 @@ IRAM_RW_BSS 0x80020800 0x0002800  ; HAB data has to be within first partition i.
     }
 }
 
-
 ROMCP_TBL +0 0x00001000
 {
     TBL 0x80023000 UNINIT 0x00000FB8
diff --git a/mcurom_src/code/build/make/Makefile.compiler b/mcurom_src/code/build/make/Makefile.compiler
index c479cd4..535f6d9 100644
--- a/mcurom_src/code/build/make/Makefile.compiler
+++ b/mcurom_src/code/build/make/Makefile.compiler
@@ -42,7 +42,8 @@ DEFCFLAGS := \
   --apcs /interwork \
   --cpu $(CPUNAME) \
   --fpu softvfp \
-  --no_unaligned_access
+  --no_unaligned_access \
+  --protect_stack_all
 
 # ARM assembly compiler standard flags
 DEFAFLAGS := \
@@ -80,4 +81,4 @@ else
 endif
 
 # Report all warnings as error
-DEFCFLAGS += --diag_error=warning
\ No newline at end of file
+DEFCFLAGS += --diag_error=warning
-- 
2.7.4

